Description: Locate installed data directory when searching for PocketSphinx resources
Author: Codex Agent <codex@example.com>
Forwarded: not-needed
Last-Updated: 2025-10-19
---
diff --git a/rhubarb/CMakeLists.txt b/rhubarb/CMakeLists.txt
index b262cec..0e30384 100644
--- a/rhubarb/CMakeLists.txt
+++ b/rhubarb/CMakeLists.txt
@@ -503,6 +503,7 @@ target_link_libraries(rhubarb-tools
 	utfcpp
 	utf8proc
 )
+target_compile_definitions(rhubarb-tools PUBLIC RHUBARB_INSTALL_FULL_DATADIR="${CMAKE_INSTALL_FULL_DATADIR}/rhubarb-lip-sync")
 
 # Define Rhubarb executable
 add_executable(rhubarb
@@ -526,6 +527,7 @@ target_link_libraries(rhubarb
 	rhubarb-lib
 )
 target_compile_options(rhubarb PUBLIC ${enableWarningsFlags})
+target_compile_definitions(rhubarb PRIVATE RHUBARB_INSTALL_FULL_DATADIR="${CMAKE_INSTALL_FULL_DATADIR}/rhubarb-lip-sync")
 
 # Define test project
 if(RHUBARB_BUILD_TESTS)
diff --git a/rhubarb/src/recognition/pocketSphinxTools.cpp b/rhubarb/src/recognition/pocketSphinxTools.cpp
index 6736ec8..eab5c18 100644
--- a/rhubarb/src/recognition/pocketSphinxTools.cpp
+++ b/rhubarb/src/recognition/pocketSphinxTools.cpp
@@ -169,7 +169,7 @@ BoundedTimeline<Phone> recognizePhones(
 }
 
 const path& getSphinxModelDirectory() {
-	static path sphinxModelDirectory(getBinDirectory() / "res" / "sphinx");
+	static path sphinxModelDirectory(getResourceDirectory() / "sphinx");
 	return sphinxModelDirectory;
 }
 
diff --git a/rhubarb/src/tools/platformTools.cpp b/rhubarb/src/tools/platformTools.cpp
index f9b9d8b..6d465f1 100644
--- a/rhubarb/src/tools/platformTools.cpp
+++ b/rhubarb/src/tools/platformTools.cpp
@@ -16,6 +16,10 @@
 #endif
 #include "fileTools.h"
 
+#ifndef RHUBARB_INSTALL_FULL_DATADIR
+#define RHUBARB_INSTALL_FULL_DATADIR ""
+#endif
+
 using std::filesystem::path;
 using std::string;
 using std::vector;
@@ -54,35 +58,68 @@ path getBinPath() {
 
 path _getBinDirectory() {
 	path binPath = getBinPath();
-	path binDirectory = binPath.parent_path();
-
-	// Perform sanity checks on bin directory
-	path testPath = binDirectory / "res" / "sphinx" / "cmudict-en-us.dict";
-	if (!std::filesystem::exists(testPath)) {
-		throw std::runtime_error(fmt::format(
-			"Found Rhubarb executable at {}, but could not find resource file {}.",
-			binPath.u8string(),
-			testPath.u8string()
-		));
-	}
-	try {
-		throwIfNotReadable(testPath);
-	} catch (...) {
-		throw std::runtime_error(fmt::format(
-			"Cannot read resource file {}. Please check file permissions.",
-			testPath.u8string()
-		));
-	}
-
-	return binDirectory;
+	return binPath.parent_path();
 }
 
+
 // Returns the directory containing the Rhubarb executable binary.
 path getBinDirectory() {
 	static const path result = _getBinDirectory();
 	return result;
 }
 
+
+namespace {
+	const path relativeDictionaryPath = path("res") / "sphinx" / "cmudict-en-us.dict";
+
+	void ensureResourceReadable(const path& resourcePath) {
+		try {
+			throwIfNotReadable(resourcePath);
+		} catch (...) {
+			throw std::runtime_error(fmt::format(
+				"Cannot read resource file {}. Please check file permissions.",
+				resourcePath.u8string()
+			));
+		}
+	}
+}
+
+path _getResourceDirectory() {
+	const path binDirectory = getBinDirectory();
+	const path bundledDictionaryPath = binDirectory / relativeDictionaryPath;
+	if (std::filesystem::exists(bundledDictionaryPath)) {
+		ensureResourceReadable(bundledDictionaryPath);
+		return binDirectory / "res";
+	}
+
+	const path installDataDir(RHUBARB_INSTALL_FULL_DATADIR);
+	path installedDictionaryPath;
+	if (!installDataDir.empty()) {
+		installedDictionaryPath = installDataDir / relativeDictionaryPath;
+		if (std::filesystem::exists(installedDictionaryPath)) {
+			ensureResourceReadable(installedDictionaryPath);
+			return installDataDir / "res";
+		}
+	}
+
+	std::string searchedPaths = bundledDictionaryPath.u8string();
+	if (!installDataDir.empty()) {
+		searchedPaths += " and ";
+		searchedPaths += installedDictionaryPath.u8string();
+	}
+
+	throw std::runtime_error(fmt::format(
+		"Found Rhubarb executable at {}, but could not find resource file (searched {}).",
+		getBinPath().u8string(),
+		searchedPaths
+	));
+}
+
+path getResourceDirectory() {
+	static const path result = _getResourceDirectory();
+	return result;
+}
+
 path getTempFilePath() {
 	const path tempDirectory = std::filesystem::temp_directory_path();
 	static boost::uuids::random_generator generateUuid;
diff --git a/rhubarb/src/tools/platformTools.h b/rhubarb/src/tools/platformTools.h
index e93b056..b65f9e2 100644
--- a/rhubarb/src/tools/platformTools.h
+++ b/rhubarb/src/tools/platformTools.h
@@ -7,6 +7,7 @@
 
 std::filesystem::path getBinPath();
 std::filesystem::path getBinDirectory();
+std::filesystem::path getResourceDirectory();
 std::filesystem::path getTempFilePath();
 
 std::tm getLocalTime(const time_t& time);
